@* Це інжекція сервісу (служби) в Razor
!! це тільки для демонстрації, практика погана !! *@
@inject WebApplication1.Servises.Hash.IHashService hashService
@{
    ViewData["Title"] = "Ioc";
}

<div class="page-url">
    <h1 class="display-4">Іеверсія управління (IoC, inversion control)</h1>
</div>
<p>
    Іеверсія управління - це схема (паттерн) проектування згідно з яким 
    управління життєвим циклом об'єктів перекладається на окремий архутектурний єлемент - інжектор або контейнер служб.
</p>
<p>
    Замість традиційної схеми, за якої кожен об'єкт сам створює всі необхідні для своєї роботи залежності (інщі об'єкти),   
    у сфері Ioc об'єкти "запитують" у контейнера необхідні елементи - інжектує їх.
</p>
<ul>
    <li>Створюємо місце для служб - папку Services</li>
    <li>За принципом DIP (SOLID) служби слід впроваджувати через інтерфейси, 
        відповідно одна служба - що найменше два файли, тому для кожної служби також бажано створювати папки (Hash).</li>
    <li>Створюємо інтерфейс для служби IHashService</li>
    <li>Створюємо клас - імплементацію інтерфейсу (Md5HashService)</li>
    <li>Реєструємо службу у Program.cs (див. коментарі там)</li>
    <li>Ітжектруємо службу у контроллері (див. коментарі там)</li>
</ul>
<ul>
    <li>Створюємо зе один клас - ShaHashService</li>
    <li>Замінюємо клас і іеструкції реєстрації сервісу (Program.cs)</li>
</ul>
<p>
    hash (from controller) = @ViewData["hash"] <br/>
    hash (from view) = @(hashService.Digest("123")) <br/>
    hashCode (from controller) = @ViewData["hashCode"] <br/>
    hashCode (from view) = @hashService.GetHashCode() <br/>
</p>

<h2>Часи існування служб (Service Scopes) </h2>
<p>
    Деякі об'єкти-служби нормально себе поводять якщо створюються тільки один раз, наприклад, служба хешування, 
    генератор випадкових чисел. Інші об'єкти можуть вимагати перестворення з новими запитами, наприклад, служби, 
    пов'язані з доступом користувачів (новий запит новий користувач нова служба)
    Ці часові області "життя" об'єктів і називають Service Scopes. А до задач Іос (інверсії управління) належить 
    також управління життєвим циклом служб.
</p>

<p>
    Розрізняється декілька способів реєстрації служб: <br/>
    <code>AddSingleton</code> - об'єкт залишається незмінним максимально довго, не змінюється навіть при оновленні сторінки. <br/>
    <code>AddScoped</code> - об'єкт залишається незмінним протягом одного запиту (Request), при оновленні сторінки змінюється<br/> 
    <code>AddTransient</code> - об'єкт змінюється при кожному зверненні - усі запити інжекції одержать різні об'єкти.
</p>